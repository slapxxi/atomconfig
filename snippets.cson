# You can create a new snippet in this file by typing "snip" and then hitting
# tab.
#
# An example CoffeeScript snippet to expand log to console.log:
#
# '.source.coffee':
#   'Console log':
#     'prefix': 'log'
#     'body': 'console.log $1'
#
# This file uses CoffeeScript Object Notation (CSON).
# If you are unfamiliar with CSON, you can read more about it here:
# https://github.com/bevry/cson#what-is-cson
'.text.html':
	'EEx tag':
		'prefix': 'ri'
		'body': '<%= $1 %>'
	'Jinja2 value':
		'prefix': 'jv'
		'body': '{{ $1 }}'
	'Jinja2 tag':
		'prefix': 'jt'
		'body': '{% $1 %}'

'.source.python':
  'Async New Method':
    'prefix': 'adefs'
    'body': 'async def ${1:mname}(self, ${2:arg}):\n\t${3:pass}'
  'Async New Function':
    'prefix': 'adef'
    'body': 'async def ${1:fname}(${2:arg}):\n\t${3:pass}'
  'async for':
    'prefix': 'afor'
    'body': 'async for ${1:value} in ${2:variable}:\n\t${3:pass}'

'.source.js':
  'componentDidCatch method':
    'prefix': 'cdc'
    'body': 'componentDidCatch(${1:props}) {\n  ${2}\n}'
  'componentWillReceiveProps method':
    'prefix': 'cwrp'
    'body': 'componentWillReceiveProps(${1:props}) {\n  ${2}\n}'
  'componentWillUnmount method':
    'prefix': 'cwu'
    'body': 'componentWillUnmount(${1}) {\n  ${2}\n}'
  'componentWillUpdate method':
    'prefix': 'cwup'
    'body': 'componentWillUpdate(${1}) {\n  ${2}\n}'
  'ComponentDidMount method':
    'prefix': 'cdm'
    'body': 'componentDidMount(${1}) {\n  ${2}\n}'
  'ComponentWillMount method':
    'prefix': 'cwm'
    'body': 'componentWillMount(${1}) {\n  ${2}\n}'
  'Functional React Component':
    'prefix': 'com'
    'body': 'class ${1:Component} extends React.Component {\n  render() {\n    return ${2:div}\n  }\n}${3}'
  'React Component':
    'prefix': 'comf'
    'body': 'function ${1:Component}(${2:props}) {\n  return ${3:div}${4}\n}${5}'
  'Styled Component':
    'prefix': 'coms'
    'body': 'const ${1:Component} = styled.${2:div}`\n`;${3}'
  'describe block':
    'prefix': 'desc'
    'body': 'describe(\'${1:description}\', () => {\n  ${2:// body...}\n});${3}'
  'it spec':
    'prefix': 'it'
    'body': 'it(\'${1:description}\', () => {\n  ${2:// body...}\n});${3}'
  'it spec pending':
    'prefix': 'itp'
    'body': 'it(\'${1:description}\');${2}'
  'it spec async':
    'prefix': 'ita'
    'body': 'it(\'${1:description}\', async () => {\n  ${2:// body...}\n});${3}'
  'function':
    'prefix': 'f'
    'body': 'function ${1:name}(${2:params}) {${3}}${4}'
  'async function':
    'prefix': 'af'
    'body': 'async function ${1:name}(${2:params}) {${3}}'
  'async arrow function':
    'prefix': 'afa'
    'body': 'async (${1:params}) => ${2:body}'
  'generator function':
    'prefix': 'gf'
    'body': 'function* ${1:name}(${2:params}) {${3}}'
  'arrow function with object':
    'prefix': 'fao'
    'body': '({ ${1:prop} }) => ({ ${2:prop} })'
  'arrow function':
    'prefix': 'fa'
    'body': '(${1:param}) => ${2:result}'
  'generator arrow function':
    'prefix': 'afg'
    'body': '* (${1:param}) => ${2:result}'
  'expect':
    'prefix': 'x'
    'body': 'expect(${1:result})'
  'expect to equal':
    'prefix': 'xe'
    'body': 'expect(${1:result}).toEqual(${2:value})${3}'
  'expect to be':
    'prefix': 'xb'
    'body': 'expect(${1:result}).toBe(${2:value})${3}'
  'expect to match snapshot':
    'prefix': 'xm'
    'body': 'expect(${1:result.toJSON()}).toMatchSnapshot()${2}'
  'before':
    'prefix': 'bef'
    'body': 'before${1:Each}(() => {\n  ${2}\n});${3}'
  'after':
    'prefix': 'aft'
    'body': 'after${1:Each}(() => {\n  ${2}\n});${3}'
  'import all':
    'prefix': 'impa'
    'body': 'import * as ${1:name} from \'${2:module}\'${3}'
  'import':
    'prefix': 'imp'
    'body': 'import \{${2}\} from \'${1:location}\''
  'import type':
    'prefix': 'impt'
    'body': 'import type {${2:type}} from \'${1:location}\''
  'import React':
    'prefix': 'impr'
    'body': 'import React from \'react\';${1}'
  'export default':
    'prefix': 'exd'
    'body': 'export default ${1:name}${2}'
  'class':
    'prefix': 'cls'
    'body': 'class ${1:Name} {\n}${2}'
  'create object':
    'prefix': 'oj'
    'body': '{\n  ${1:name: value},\n};'
  'create object inline':
    'prefix': 'oji'
    'body': '{ ${1:name: value}, ${2} }${3}'
  'create object method':
    'prefix': 'ojf'
    'body': '{\n  ${1:name}(${2:params}) {\n    return ${3:value}${4}\n  },\n};${5}'
